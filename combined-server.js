// combined-server.js - ржПржХрждрзНрж░рж┐ржд рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзЗржЯржЖржк
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");
const bodyParser = require("body-parser");
const path = require("path");

// ржоржбрзЗрж▓ржЧрзБрж▓рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рзБржи
const User = require("./models/User");
const Otp = require("./models/Otp");

const app = express();
const PORT = process.env.PORT || 3000;

// MongoDB рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи
const MONGO_URI = process.env.MONGO_URI || 'mongodb+srv://admin:Kw5FmYPNbFMtWCPS@talimulcluster.irmh5p4.mongodb.net/?retryWrites=true&w=majority&appName=TalimulCluster';

mongoose.connect(MONGO_URI)
  .then(async () => {
    console.log('тЬЕ MongoDB рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ');
    
    // ржЗржиржбрзЗржХрзНрж╕ рждрзИрж░рж┐ ржХрж░рзБржи (ржжрзНржмрж┐рждрзАржпрж╝ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржирзЗржУржпрж╝рж╛)
    try {
      const db = mongoose.connection.db;
      await db.collection('users').createIndex({ email: 1 }, { unique: true });
      await db.collection('otps').createIndex({ createdAt: 1 }, { expireAfterSeconds: 300 }); // OTPs expire after 5 minutes
      console.log('тЬЕ ржЗржиржбрзЗржХрзНрж╕ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ');
    } catch (err) {
      console.error('тЭМ ржЗржиржбрзЗржХрзНрж╕ рждрзИрж░рж┐рждрзЗ рж╕ржорж╕рзНржпрж╛:', err);
    }
  })
  .catch((err) => {
    console.error('тЭМ MongoDB рж╕ржВржпрзЛржЧрзЗ рж╕ржорж╕рзНржпрж╛:', err);
  });

// ржорж┐ржбрж▓ржУржпрж╝рзНржпрж╛рж░
app.use(cors({
    origin: '*', // ржкрзНрж░рзЛржбрж╛ржХрж╢ржирзЗ ржЖржкржирж╛рж░ ржлрзНрж░ржирзНржЯржПржирзНржб URL ржжрж┐ржи
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржлрж╛ржЗрж▓ рж╕рж╛рж░рзНржн ржХрж░рж╛рж░ ржЬржирзНржп
app.use(express.static(path.join(__dirname, 'public')));

// ржЗржорзЗржЗрж▓ ржЯрзНрж░рж╛ржирзНрж╕ржкрзЛрж░рзНржЯрж╛рж░ рж╕рзЗржЯржЖржк
const transporter = nodemailer.createTransport({
    service: process.env.EMAIL_SERVICE || 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    },
    tls: {
        rejectUnauthorized: false
    }
});

// OTP ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
function generateOTP() {
    return Math.floor(1000 + Math.random() * 9000).toString();
}

// ржЗржорзЗржЗрж▓ ржкрж╛ржарж╛ржирзЛрж░ ржлрж╛ржВрж╢ржи (ржжрзНржмрж┐рждрзАржпрж╝ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржЙржирзНржиржд рж╕ржВрж╕рзНржХрж░ржг)
async function sendOtpEmail(email, otp) {
    try {
        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "ржЖржкржирж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржЕржЯрж┐ржкрж┐ ржХрзЛржб",
            html: `
                <div style="font-family: 'Hind Siliguri', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">
                    <h2 style="color: #6A35F2; text-align: center;">ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг ржХрзЛржб</h2>
                    <p style="font-size: 16px;">ржкрзНрж░рж┐ржпрж╝ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА,</p>
                    <p style="font-size: 16px;">ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛рж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржХрзЛржбржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:</p>
                    <div style="text-align: center; margin: 30px 0;">
                        <div style="font-size: 30px; font-weight: bold; letter-spacing: 5px; background-color: #f4f4f4; padding: 15px; border-radius: 5px;">${otp}</div>
                    </div>
                    <p style="font-size: 16px;">ржПржЗ ржХрзЛржбржЯрж┐ <strong>рзи ржорж┐ржирж┐ржЯ</strong> ржкрж░рзНржпржирзНржд ржмрзИржз ржерж╛ржХржмрзЗред</p>
                    <p style="font-size: 14px; color: #777; margin-top: 30px;">ржЖржкржирж┐ ржпржжрж┐ ржПржЗ ржЕржирзБрж░рзЛржзржЯрж┐ ржирж╛ ржХрж░рзЗ ржерж╛ржХрзЗржи, рждрж╛рж╣рж▓рзЗ ржПржЗ ржЗржорзЗржЗрж▓ ржЙржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред</p>
                </div>
            `
        };
        
        await transporter.sendMail(mailOptions);
        console.log(`тЬЕ ${email} ржП OTP ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ`);
        return true;
    } catch (error) {
        console.error("тЭМ OTP ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже:", error);
        return false;
    }
}

// ржорж┐ржбрж▓ржУржпрж╝рзНржпрж╛рж░: ржЗржЙржЬрж╛рж░ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
async function userExists(req, res, next) {
    const { email } = req.body;
    
    if (!email) {
        return res.status(400).json({ success: false, message: "ржЗржорзЗржЗрж▓ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи" });
    }
    
    try {
        const existingUser = await User.findOne({ email });
        req.userExists = !!existingUser;
        next();
    } catch (error) {
        console.error("тЭМ ржЗржЙржЬрж╛рж░ ржЪрзЗржХ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:", error);
        res.status(500).json({ success: false, message: "рж╕рж╛рж░рзНржнрж╛рж░ ржПрж░рж░" });
    }
}

// рж░рзБржЯ: рж╣рзЛржо ржкрзЗржЗржЬ
app.get('/', (req, res) => {
    res.send('ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржи API ржЪрж╛рж▓рзБ ржЖржЫрзЗ! ЁЯЪА');
});

// рж░рзБржЯ: рж╕рж╛рж░рзНржнрж╛рж░ ржкрж┐ржВржЯрзЗрж╕рзНржЯ
app.get('/ping', (req, res) => {
    console.log('Ping request received');
    res.json({ status: 'success', message: 'Server is running!' });
});

// рж░рзБржЯ: ржЗржорзЗржЗрж▓ ржЪрзЗржХ ржПржмржВ OTP ржкрж╛ржарж╛ржирзЛ (ржжрзНржмрж┐рждрзАржпрж╝ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ)
app.post("/api/check-email", userExists, async (req, res) => {
    const { email } = req.body;
    
    if (req.userExists) {
        return res.json({ success: false, message: "ржПржЗ ржЗржорзЗржЗрж▓ ржжрж┐ржпрж╝рзЗ ржПржХрж╛ржЙржирзНржЯ ржЗрждрж┐ржоржзрзНржпрзЗ ржЖржЫрзЗ" });
    }
    
    try {
        // OTP ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзБржи
        const otp = generateOTP();
        
        // ржЖржЧрзЗрж░ OTP ржерж╛ржХрж▓рзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи
        await Otp.deleteMany({ email });
        
        // ржирждрзБржи OTP рждрзИрж░рж┐ ржХрж░рзБржи
        await new Otp({
            email,
            otp,
            createdAt: new Date(),
            attempts: 0
        }).save();
        
        console.log(`Generated OTP for ${email}: ${otp}`);
        
        // OTP ржЗржорзЗржЗрж▓ ржХрж░рзБржи
        const emailSent = await sendOtpEmail(email, otp);
        
        if (emailSent) {
            res.json({ success: true, message: "ржЖржкржирж╛рж░ ржЗржорзЗржЗрж▓рзЗ ржЕржЯрж┐ржкрж┐ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ" });
        } else {
            res.status(500).json({ success: false, message: "ржЕржЯрж┐ржкрж┐ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ" });
        }
    } catch (error) {
        console.error("тЭМ OTP ржкрж╛ржарж╛ржирзЛрж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:", error);
        res.status(500).json({ 
            success: false, 
            message: "OTP ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред",
            error: error.message
        });
    }
});

// рж░рзБржЯ: OTP ржкрж╛ржарж╛ржирзЛ (ржкрзНрж░ржержо рж╕рж╛рж░рзНржнрж╛рж░, ржмрзНржпрж╛ржХржУржпрж╝рж╛рж░рзНржб ржХржорзНржкрзНржпрж╛ржЯрж┐ржмрж┐рж▓рж┐ржЯрж┐рж░ ржЬржирзНржп рж░рж╛ржЦрж╛)
app.post('/api/send-otp', async (req, res) => {
    try {
        console.log('OTP send request received:', req.body);
        const { email } = req.body;
        
        if (!email) {
            return res.status(400).json({ success: false, message: 'ржЗржорзЗржЗрж▓ ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐!' });
        }
        
        // ржЪрзЗржХ ржХрж░рзБржи ржЗржорзЗржЗрж▓ ржЖржЧрзЗ ржерзЗржХрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ 
                success: false, 
                message: 'ржПржЗ ржЗржорзЗржЗрж▓ ржжрж┐ржпрж╝рзЗ ржЗрждрж┐ржоржзрзНржпрзЗ ржПржХржЯрж┐ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЖржЫрзЗ!'
            });
        }

        // OTP ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзБржи
        const otp = generateOTP();
        console.log(`Generated OTP for ${email}: ${otp}`);
        
        // ржЖржЧрзЗрж░ OTP ржерж╛ржХрж▓рзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи
        await Otp.deleteMany({ email });
        
        // ржирждрзБржи OTP рждрзИрж░рж┐ ржХрж░рзБржи
        await new Otp({
            email,
            otp,
            createdAt: new Date(),
            attempts: 0
        }).save();

        // OTP ржЗржорзЗржЗрж▓ ржХрж░рзБржи
        const emailSent = await sendOtpEmail(email, otp);
        
        if (emailSent) {
            res.json({ success: true, message: 'OTP рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!' });
        } else {
            res.status(500).json({ success: false, message: 'OTP ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ!' });
        }
    } catch (error) {
        console.error('OTP ржкрж╛ржарж╛ржирзЛрж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:', error);
        res.status(500).json({ 
            success: false, 
            message: 'OTP ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред',
            error: error.message
        });
    }
});

// рж░рзБржЯ: OTP ржЖржмрж╛рж░ ржкрж╛ржарж╛ржирзЛ
app.post("/api/resend-otp", async (req, res) => {
    const { email } = req.body;
    
    if (!email) {
        return res.status(400).json({ success: false, message: "ржЗржорзЗржЗрж▓ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи" });
    }
    
    try {
        // ржЖржЧрзЗрж░ OTP ржерж╛ржХрж▓рзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи
        await Otp.deleteMany({ email });
        
        // ржирждрзБржи OTP ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзБржи
        const otp = generateOTP();
        
        // ржирждрзБржи OTP рждрзИрж░рж┐ ржХрж░рзБржи
        await new Otp({
            email,
            otp,
            createdAt: new Date(),
            attempts: 0
        }).save();
        
        // OTP ржЗржорзЗржЗрж▓ ржХрж░рзБржи
        const emailSent = await sendOtpEmail(email, otp);
        
        if (emailSent) {
            res.json({ success: true, message: "ржирждрзБржи ржЕржЯрж┐ржкрж┐ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ" });
        } else {
            res.status(500).json({ success: false, message: "ржЕржЯрж┐ржкрж┐ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ" });
        }
    } catch (error) {
        console.error("тЭМ Resend OTP error:", error);
        res.status(500).json({ success: false, message: "рж╕рж╛рж░рзНржнрж╛рж░ ржПрж░рж░" });
    }
});

// рж░рзБржЯ: OTP ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ (ржЙржирзНржиржд ржЙржнржпрж╝ рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ ржорж┐рж╢рзНрж░рж┐ржд рж╕ржВрж╕рзНржХрж░ржг)
app.post('/api/verify-otp', async (req, res) => {
    try {
        console.log('OTP verification request received:', req.body);
        const { email, otp } = req.body;
        
        if (!email || !otp) {
            return res.status(400).json({ success: false, message: 'ржЗржорзЗржЗрж▓ ржмрж╛ OTP ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐!' });
        }

        // ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ OTP ржЦрзБржБржЬрзБржи
        const otpRecord = await Otp.findOne({ email });
        
        if (!otpRecord) {
            return res.status(400).json({ success: false, message: 'OTP ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ рж╣ржпрж╝рзЗржЫрзЗ ржмрж╛ ржмрзИржз ржиржпрж╝!' });
        }
        
        // OTP ржорзЗржпрж╝рж╛ржж ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи (2 ржорж┐ржирж┐ржЯ)
        const now = Date.now();
        const otpCreatedAt = new Date(otpRecord.createdAt).getTime();
        
        if (now - otpCreatedAt > 120000) {
            await Otp.deleteMany({ email });
            return res.status(400).json({ success: false, message: 'OTP ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ рж╣ржпрж╝рзЗржЫрзЗ!' });
        }
        
        // ржкрзНрж░ржЪрзЗрж╖рзНржЯрж╛рж░ рж╕ржВржЦрзНржпрж╛ ржмрж╛ржбрж╝рж╛ржи
        otpRecord.attempts += 1;
        await otpRecord.save();
        
        // рж╕рж░рзНржмрж╛ржзрж┐ржХ 3ржЯрж┐ ржкрзНрж░ржЪрзЗрж╖рзНржЯрж╛
        if (otpRecord.attempts > 3) {
            await Otp.deleteMany({ email });
            return res.status(400).json({ success: false, message: 'ржЕржирзЗржХржмрж╛рж░ ржнрзБрж▓ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ OTP ржкрж╛ржарж╛ржиред' });
        }
        
        // OTP ржорж┐рж▓рзЗ ржпрж╛ржпрж╝ ржХрж┐ржирж╛
        if (otp !== otpRecord.otp) {
            return res.status(400).json({ 
                success: false, 
                message: `ржнрзБрж▓ OTP! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред (${3 - otpRecord.attempts} ржЪрзЗрж╖рзНржЯрж╛ ржмрж╛ржХрж┐ ржЖржЫрзЗ)`
            });
        }
        
        // OTP рж╕ржарж┐ржХ, рж╕рзНржЯрзЛрж░рзЗржЬ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи
        await Otp.deleteMany({ email });
        console.log(`OTP verified successfully for ${email}`);
        
        res.json({ success: true, message: 'OTP рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!' });
    } catch (error) {
        console.error('OTP ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:', error);
        res.status(500).json({ 
            success: false, 
            message: 'OTP ржпрж╛ржЪрж╛ржЗ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред',
            error: error.message
        });
    }
});

// рж░рзБржЯ: ржирждрзБржи ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи
app.post('/api/register', async (req, res) => {
    try {
        const { name, email, password } = req.body;
        
        if (!name || !email || !password) {
            return res.status(400).json({ 
                success: false, 
                message: 'рж╕ржм рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ ржЖржмрж╢рзНржпржХ!'
            });
        }
        
        // ржЪрзЗржХ ржХрж░рзБржи ржЗржорзЗржЗрж▓ ржЖржЧрзЗ ржерзЗржХрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ 
                success: false, 
                message: 'ржПржЗ ржЗржорзЗржЗрж▓ ржжрж┐ржпрж╝рзЗ ржЗрждрж┐ржоржзрзНржпрзЗ ржПржХржЯрж┐ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЖржЫрзЗ!'
            });
        }
        
        // ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж╣рзНржпрж╛рж╢ ржХрж░рзБржи
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);
        
        // ржирждрзБржи ржЗржЙржЬрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи
        const newUser = new User({
            name,
            email,
            password: hashedPassword,
            createdAt: new Date()
        });
        
        await newUser.save();
        
        res.json({ 
            success: true, 
            message: 'ржЗржЙржЬрж╛рж░ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
            user: {
                id: newUser._id,
                name: newUser.name,
                email: newUser.email
            }
        });
    } catch (error) {
        console.error('рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржирзЗрж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:', error);
        res.status(500).json({ 
            success: false, 
            message: 'рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред',
            error: error.message
        });
    }
});

// рж░рзБржЯ: ржЗржЙржЬрж╛рж░ рж▓ржЧржЗржи
app.post('/api/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        
        if (!email || !password) {
            return res.status(400).json({ 
                success: false, 
                message: 'ржЗржорзЗржЗрж▓ ржПржмржВ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи!'
            });
        }
        
        // ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзБржи
        const user = await User.findOne({ email });
        
        if (!user) {
            return res.status(400).json({ 
                success: false, 
                message: 'ржнрзБрж▓ ржЗржорзЗржЗрж▓ ржмрж╛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб!'
            });
        }
        
        // ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи
        const isMatch = await bcrypt.compare(password, user.password);
        
        if (!isMatch) {
            return res.status(400).json({ 
                success: false, 
                message: 'ржнрзБрж▓ ржЗржорзЗржЗрж▓ ржмрж╛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб!'
            });
        }
        
        // ржкрзНрж░рзЛржбрж╛ржХрж╢ржирзЗрж░ ржЬржирзНржп ржЖржкржирж┐ ржПржЦрж╛ржирзЗ JWT ржЯрзЛржХрзЗржи ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
        // const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });
        
        res.json({ 
            success: true, 
            message: 'рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓ржЧржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!',
            user: {
                id: user._id,
                name: user.name,
                email: user.email
            }
            // token: token
        });
    } catch (error) {
        console.error('рж▓ржЧржЗржирзЗрж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:', error);
        res.status(500).json({ 
            success: false, 
            message: 'рж▓ржЧржЗржи ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред',
            error: error.message
        });
    }
});

// ржХрж┐ржЫрзБ ржмрзЗрж╕рж┐ржХ ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржпрзЛржЧ ржХрж░рзБржи
app.use((req, res, next) => {
    res.status(404).json({ success: false, message: 'ржПржЗ URL ржЯрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐!' });
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ success: false, message: 'рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржжрзЗржЦрж╛ ржжрж┐ржпрж╝рзЗржЫрзЗ!' });
});

// рж╕рж╛рж░рзНржнрж╛рж░ рж╢рзНржпрж╛ржЯржбрж╛ржЙржи рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (ржжрзНржмрж┐рждрзАржпрж╝ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ)
process.on('SIGINT', async () => {
    await mongoose.connection.close();
    console.log('MongoDB connection closed');
    process.exit(0);
});

// рж╕рж╛рж░рзНржнрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржи
app.listen(PORT, () => {
    console.log(`ЁЯЪА рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ: http://localhost:${PORT}`);
    console.log('Environment variables loaded:', {
        PORT: PORT,
        EMAIL_USER: process.env.EMAIL_USER,
        EMAIL_PASS: process.env.EMAIL_PASS ? 'Set (hidden)' : 'Not set',
        MONGO_URI: process.env.MONGO_URI ? 'Set (hidden)' : 'Using default'
    });
});